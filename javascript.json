{
"JSWebComponent": {
	"prefix": "webCDefault",
	"body": [
		"    ",
		"window.addEventListener(\"DOMContentLoaded\", () => { ",
		"                _createAndAppendElementToTargetElement(\"${4:body}\", ${1:ClassName}, \"test-element\");",
		"});",
		"",
		"// Füge Testobjekt einem Ziel zu",
		"function _createAndAppendElementToTargetElement(targetEl, ClassName = null, cssClass) {",
		"                // css-Klasse, die an das erstellte Element übergeben werden soll:",
		"                const styling = cssClass;",
		"",
		"                // Ziel-Element im DOM auswählen",
		"                const targetElement = document.querySelector(targetEl);",
		"",
		"                // Prüfen, ob das Element bereits vorhanden ist",
		"                const HTMLTag = ClassName ? (new ClassName()).tagName : 'fieldset';",
		"                const isExisting = document.querySelector(HTMLTag);",
		"                if (isExisting) {",
		"                                console.log(isExisting);",
		"                                return;",
		"                }",
		"",
		"                // Neues Element erstellen und hinzufügen",
		"                const newElement = ClassName ? new ClassName() : document.createElement('fieldset');",
		"                newElement.classList.add(styling);",
		"                targetElement.appendChild(newElement);",
		"",
		"                // Konsolenausgabe",
		"                console.log('Element Appended');",
		"}",
		"",
		"// Weise dependandy zu .",
		"",
		"",
		"        class ${1:ClassName} extends HTMLElement {",
		"            ",
		"            constructor() {",
		"                super();",
		"                this.root = this.attachShadow( { mode:\"closed\"});",
		"",
		"                const template = document.createElement(\"template\");",
		"                template.innerHTML = /* html */ `",
		"                    <!-- your template here -->",
		"                <style>",
		"",
		"                :host {",
		"                    display: block;",
		"                    box-sizing: border-box;",
		"                    ",
		"                    font-size: var(--fs, inherit);",
		"                    --fs: var(--_fs);",
		"                    color: var(--fc, inherit);",
		"                    --fc: var(--_fc);",
		"                    background-color: var(--bg, transparent);",
		"                    --bg: var(--_bg);",
		"                    ",

				"      // relative nur damit das pre-tag sich selbst centern kann",
		"                    position: relative;",
		"                    ",
		"",
		"                }",
		"    * {",
		"       box-sizing: border-box;",
		"       margin: 0;",
		"       padding: 0;",
		"     }",
		"    ::slotted(YOUR-ELEMENT) {",
		"       background-color: red !important;",
		"     }",
		"",
		"",
		"",
		"                </style>",
		"",
		"                ",
		"                <slot> ",
		"                                <pre style=\"height: 5rem; width: 5rem;\">",
"                                                  vvvvvvvvvvvvvvvvvvv            ",
"                                                Die Web-Component ist hier !!!  ",
"                                                  ^^^^^^^^^^^^^^^^^^^            ",
		"                                                                                  </pre>                                   ",
		"                </slot>",
		"                ",
		"",
		"                `;   ",
		"",
		"                this.root.appendChild(template.content.cloneNode(true));",
		"",
		"",
		"            }",
		"",
		"",
		"",
		"            static get observedAttributes() {",
		"                // return [\"opened\"];",
		"            }",
		"            ",
		"",
		"            get opened() {",
		"                // return this.getAttribute(\"opened\");",
		"            }",
		"            set opened(value) {",
		"                // this.setAttribute(\"opened\", value)",
		"            }",
		"            attributeChangedCallback(name, oldValue, newValue) {",
		"            }",
		"            connectedCallback() {",
		"                this._addEventListeners();",
		"            }",
		"",
		"            _addEventListeners() {",
		"                this.addEventListener(\"onhover\", () => {",
		"                })",
		"            }",
		"        }       ",
		"",  
		"        customElements.define(\"custom-${3:example}\" , ${1:ClassName});"
	],
	"description": "JSWebComponent"
},
"JSWebComponentTestValues": {
	"prefix": "webCTestValues",
	"body": [
		"",
		"// This Block Creates your Component , which will be appended to \"body ( by default\") START ",
		"window.addEventListener(\"DOMContentLoaded\", () => {",
		"    _createAndAppendElementToTargetElement(\"${3:body}\", ${1:ClassName}, \"test-element\");",
		"});",
		"",
		"// Füge Testobjekt einem Ziel zu",
		"function _createAndAppendElementToTargetElement(targetEl, ClassName = null, cssClass) {",
		"    // css-Klasse, die an das erstellte Element übergeben werden soll:",
		"    const styling = cssClass;",
		"",
		"    // Ziel-Element im DOM auswählen",
		"    const targetElement = document.querySelector(targetEl);",
		"",
		"    // Prüfen, ob das Element bereits vorhanden ist",
		"    const HTMLTag = ClassName ? (new ClassName()).tagName : 'fieldset';",
		"    const isExisting = document.querySelector(HTMLTag);",
		"    if (isExisting) {",
		"        console.log(isExisting);",
		"        return;",
		"    }",
		"",
		"    // Neues Element erstellen und hinzufügen",
		"    const newElement = ClassName ? new ClassName() : document.createElement('fieldset');",
		"    newElement.classList.add(styling);",
		"    targetElement.appendChild(newElement);",
		"",
		"    // Konsolenausgabe",
		"    console.log('Element Appended');",
		"}",
		"// This Block Creates your Component , which will be appended to \"body ( by default\") END ",
		"",
		"class ${1:ClassName} extends HTMLElement {",
		"    /* Lösche alle [test-display] Kommentare (einschließlich diesem) Sobald die Component fertig ist, bzw            ",
		"        sobald die Werte nicht mehr kontrolliert werden müssen          ",
		"    */",
		"    constructor() {",
		"        super();",
		"        this.root = this.attachShadow({ mode: \"closed\" });",
		"/* [test-display] =>  Kann gelöscht werden sobald component fertig! Start */",
		"",
		"this._showTestValues();",
		"window.addEventListener(\"resize\", () => {",
		"this._showTestValues();",
		"})",
		"",
		"/* Zeigt die X und Y Werte via ::before und ::after (unter der component an) */",
		"this.testValuesDisplay = `",
		"",
		":host::before {",
		"position: absolute;",
		"right: 0%;",
		"top: 100%;",
		"content: 'Y Values ' 'h=''\"'attr(h)'\"' ' pt=''\"' 'nv' '\"' ' pb=''\"' 'nv' '\"'  ;",
		"color: skyblue;",
		"width: 8ch;",
		"}",
		":host::after {",
		"position: absolute;",
		"display: flex;",
		"flex-direction: column;",
		"width: 8ch;",
		"content: 'X Values ' 'w=''\"'attr(w)'\"' ' pl=''\"' 'nv' '\"' ' pr=''\"' 'nv' '\"'  ;",
		"color: skyblue;",
		"top: 100%;",
		"}",
		"`;",
		"/* Versieht das :host Element mit Werten um sie ohne großen Aufwand visuell orten zu können */",
		"this.testValuesDimensions = `",
		":host {",
		"width: clamp(5rem, 15rem, 75%);",
		"height: clamp(5rem, 15rem, 75%);",
		"",
		"z-index: 1000;",
		"position: relative;",
		"top: 50%;",
		"left: 50%;",
		"transform: translate(-50%, -50%);",
		"outline: 3px solid green;",
		"}",
		"::-webkit-scrollbar {",
		"    display: none;",
		"}",
		"    div {",
		"        & span {",
		"            margin: auto;",
		"        }",
		"    }",
		"",
		"`",
		";",
		"",
		"/* [test-display] =>  Kann gelöscht werden sobald component fertig! End */",
		"",
		"        const template = document.createElement(\"template\");",
		"        template.innerHTML = /* html */ `",
		"                    <!-- your template here -->",
		"<!-- /* [test-display] =>  Kann gelöscht werden sobald component fertig! Start */ --> ",
		"<style> ${this.testValuesDisplay} </style>",
		"<style> ${this.testValuesDimensions} </style>",
		"",
		"<!-- /* [test-display] =>  Kann gelöscht werden sobald component fertig! End */ -->",
		"                <style>",
		"                :host {",
		"                    display: block;",
		"                    box-sizing: border-box;",
		"",
		"                    font-size: var(--fs, inherit);",
		"                    --fs: var(--_fs);",
		"                    color: var(--fc, inherit);",
		"                    --fc: var(--_fc);",
		"                    background-color: var(--bg, transparent);",
		"                    --bg: var(--_bg);",
		"",
		"                    /* Value in Test-Phase */",
		"                    max-width: var(--max-w, 100%);",
		"                    --max-w:var(--_max-w);",
		"                    max-height: var(--max-h, 100%);",
		"                    --max-h:var(--_max-h);",
		"                }",
		"",
		"                * {",
		"                   margin: 0;",
		"                   box-sizing: border-box;",
		"                   padding: 0;",
		"                }",
		"                </style>",
		"",
		"",
		"                <slot>",
		"<div style=\"display: flex; row-gap: 0.2rem; flex-direction: column;border: 3px solid green; overflow-y: scroll;z-index: 999;color: white;background-color: hsl(211, 45%, 42%); \">",
		"    <span >vvvvvvvvvvvvvvvvvvv            </span>",
		"    <span> Die Web-Component ist hier !!!  </span>",
		"    <span>  ^^^^^^^^^^^^^^^^^^^            </span>",
		"</div>                                   ",
		"                </slot>",
		"                ",
		"",
		"                `;",
		"",
		"        this.root.appendChild(template.content.cloneNode(true));",
		"",
		"",
		"    }",
		"",
		"",
		"",
		"    static get observedAttributes() {",
		"        // return [\"opened\"];",
		"    }",
		"",
		"",
		"    get opened() {",
		"        // return this.getAttribute(\"opened\");",
		"    }",
		"    set opened(value) {",
		"        // this.setAttribute(\"opened\", value)",
		"    }",
		"    attributeChangedCallback(name, oldValue, newValue) {",
		"    }",
		"    connectedCallback() {",
		"/* [test-display] =>  Kann gelöscht werden sobald component fertig! Start */",
		"this._showTestValues();",
		"/* [test-display] =>  Kann gelöscht werden sobald component fertig! End */",
		"",
		"",
		"        // this._addEventListeners();",
		"    }",
		"/* [test-display] =>  Kann gelöscht werden sobald component fertig! Start */",
		"_showTestValues() {",
		"const width = this.getBoundingClientRect().width;",
		"const height = this.getBoundingClientRect().height;",
		"    this.setAttribute(\"w\", `\\${width}px`)",
		"    this.setAttribute(\"h\", `\\${height}px`)",
		"}",
		"/* [test-display] =>  Kann gelöscht werden sobald component fertig! End */",
		"}",
		"",
		"customElements.define(\"custom-${2:example}\", ${1:ClassName});",
		"",
		"",
		""
	],
	"description": "JSWebComponent"
},
"attributeChangedCallback": {
	"prefix": "attributeChangedCallback",
	"body": [
		"        if (name === \"${1:attr}\") {",
		"            if (oldValue === null || oldValue === newValue) {",
		"                return;",
		"            }",
		"            console.log(`${1:attr} has been changed`)",
		"        }"
	],
	"description": "attributeChangedCallback"
},
"consoleLog": {
	"prefix": "cl",
	"body": [
		"console.log(${1:example});"
	],
	"description": "consoleLog"
},
"logString": {
	"prefix": "cls",
	"body": [
		"console.log(`",
		"  ",
		"                ${1:example}",
		"",
		"`);"
	],
	"description": "logString"
},
"arrayItem": {
	"prefix": "arritem","body": [
		"\"${1:example}\","
	],
	"description": "arrayItem"
},
"keyValueObject": {
	"prefix": "kv",
	"body": [
		"{",
		"  ${1:key}: ${2:value},",
		"},"
	],
	"description": "object"
},
"topObject": {
	"prefix": "topObject",
	"body": [
		"{",
		"  title: \"${1:string}\",",
		"  objectId: \"${2:NumberAsString}\",",
		"  properties: {",
		"      ${3:objectClass}: ${4:tpObject / setItem}",
		"    }",
		"},",
		""
	],
	"description": "tpObject"
},
"SetItemObj": {
	"prefix": "SetItemObj",
	"body": [
		"const setItemObj = {",
		"  // besteht aus title, objectId, properties",
		"  title: \"${1:CustomTitle}\",",
		"  objectId: \"${2:randomlyGeneratedOnCreation}\",",
		"  properties: {",
		"      objectClass: \"${3:SetItem}\",",
		"  ",
		"    }",
		"};"
	],
	"description": "SetItemObj"
},
"SetObj": {
	"prefix": "SetObj",
	"body": [
		"const setObj = {",
		"  // besteht aus title, objectId, properties",
		"  title: \"${1:CustomTitle}\",",
		"  objectId: \"${2:randomlyGeneratedOnCreation}\",",
		"  properties: {",
		"      objectClass: \"${3:Set}\",",
		"  ",
		"  },",
		"  items: [",
		"    ${4:yourItem}",
		"  ],",
		"};"
	],
	"description": "SetObj"
},
"tipObject": {
	"prefix": "tippObj",
	"body": [
		"{",
		"  title: \"${1:value}\",",
		"  items: [${4:}],",
		"  properties: {",
		"      ${2:prop}: ${3:val},",
		"    }",
		"},"
	],
	"description": "tipObject"
},
"forEach": {
	"prefix": "foreach",
	"body": [
		"        ${1:array}.forEach((${2:el}) => {",
		"            ${3:example}",
		"        });    "
	],
	"description": "forEach"
},
"arrayForEach": {
	"prefix": "arrayforeach",
	"body": [
		"Array.from(${1:document}.querySelectorAll(${2:example})).forEach((el) => {",
		"          ${3:example}",
		"    }",
		");"
	],
	"description": "forEach"
},
"addEventListener": {
	"prefix": "adddevent",
	"body": [
		"addEventListener(\"${1:click}\", (${2:el}) => {",
		"  ${3:el.}",
		"});"
	],
	"description": "addEventListener"
},"newFunction": {
	"prefix": "newFunction",
	"body": [
		"const ${1:newFunction} = (${2:}) => {",
		"      const steps = [];",
		"      const conditions = [];",
		"      const facts = [];",
		"      console.log(`${1:newFunction}() is Running`);",
		"}",
		"${1:newFunction}();"
	],
	"description": "newFunction"
},
// "utilityFunction": {
// 	"prefix": "utilityFunction",
// 	"body": [
// 		"new UtilityFunctions().${1:function}(${2:ARGS})"
// 	],
// 	"description": "utilityFunction"
// },
"newFunctionCompare": {
	"prefix": "newFunctionCompare",
	"body": [
		"function ${1:newFunction}(A, B) {",
		"        console.log(`${1:newFunction}() start`);",
		"        const a = A;",
		"        const b = B;",
		"        console.log(a);",
		"        console.log(b);",
		"        const requirements = [];",
		"        const facts = [];",
		"",
		"        const isEqual = (A = a, B = a) => {",
		"                if(a === b) {",
		"                        return true",
		"                }",
		"                else {",
		"                        return console.log(`",
		"                        result = !isEqual",
		"                        a = ${a}    b = ${b}`);",
		"                }",
		"        }",
		"        console.log(`${1:newFunction}() end`);",
		"        return isEqual();",
		"}",
		"",
		"${1:newFunction}(${2:1}, ${2:1});",
		"${1:newFunction}(${2:1}, ${3:2});"
	],
	"description": "newFunction"
},
"utilityFunction": {
	"prefix": "utilityFunction",
	"body": [
		"new UtilityFunctions().${1:function}(${2:ARGS})"
	],
	"description": "utilityFunction"
},
"forEntries": {

},
"forKey": {

},
"forValue": {

},
"map": {
	
},
"newAhk": {
	"prefix": "newAhk",
	"body": [
		"const ${1:ahkTitel} = new Ahk(\"${1:ahkTitel}\", /* systemVorgabe z.B.*/ \"${2:win + 1}\", /* deineWunscheingabe z.B.*/ \"${3:alt + c + 1}\", ${4:[\"brauchst du diesen hotKey häufiger ? wenn nein, drücke  Entfernen. tab, entfernen, wenn ja, lies dir diesen Satz zuende durch und führe die anweisung aus  => drücke entfernen, drücke tab => liste sie anschließend in einem array auf} [${5:\"case [0]\"}], {isLoop: ${7:false}, isTimeout: ${8:false}, hasLoop: ${9:false}, hasTimeout: ${10:false},isFirstStep: ${11:false},isLastStep: ${12:false},});"
	],
	"description": "newAhk"
},
}

