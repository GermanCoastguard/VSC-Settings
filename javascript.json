{
"JSWebComponent": {
	"prefix": "webC",
	"body": [
		"",
		"        class ${1:className} extends HTMLElement {",
		"            ",
		"            constructor() {",
		"                super();",
		"                this.root = this.attachShadow( { mode:\"closed\"});",
		"",
		"                const template = document.createElement(\"template\");",
		"                template.innerHTML = /* html */ `",
		"                    <!-- your template here -->",
		"                <style>",
		"",
		"                :host {",
		"                    box-sizing: border-box;",
		"                    display: flex;",
		"                    ",
		"                    font-size: var(--fs, inherit);",
		"                    --fs: var(--_fs);",
		"                    fill: var(--_fill, --fill);",
		"                }",
		"",
		"",
		"                </style>",
		"",
		"                ",
		"",
		"                ",
		"",
		"                `;   ",
		"",
		"                this.root.appendChild(template.content.cloneNode(true));",
		"",
		"",
		"            }",
		"",
		"",
		"",
		"            static get observedAttributes() {",
		"                // return [\"opened\"];",
		"            }",
		"            ",
		"",
		"            get opened() {",
		"                // return this.getAttribute(\"opened\");",
		"            }",
		"            set opened(value) {",
		"                // this.setAttribute(\"opened\", value)",
		"            }",
		"            connectedCallback() {",
		"            }",
		"        }       ",
		"",
		"        customElements.define(\"${2:your}-${3:tag}\" , ${1:className});"
	],
	"description": "JSWebComponent"
},
"attributeChangedCallback": {
	"prefix": "acc",
	"body": [
		"        if (name === \"${1:attr}\") {",
		"            if (oldValue === null || oldValue === newValue) {",
		"                return;",
		"            }",
		"            console.log(`${1:attr} has been changed`)",
		"        }"
	],
	"description": "attributeChangedCallback"
},
"logString": {
	"prefix": "logString",
	"body": [
		"console.log(`",
		"  ",
		"                ${1:example}",
		"",
		"`);"
	],
	"description": "logString"
},
}
