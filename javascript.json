{
"JSWebComponent": {
	"prefix": "webC",
	"body": [
		"",
		"        class ${1:className} extends HTMLElement {",
		"            ",
		"            constructor() {",
		"                super();",
		"                this.root = this.attachShadow( { mode:\"closed\"});",
		"",
		"                const template = document.createElement(\"template\");",
		"                template.innerHTML = /* html */ `",
		"                    <!-- your template here -->",
		"                <style>",
		"",
		"                :host {",
		"                    box-sizing: border-box;",
		"                    display: flex;",
		"                    ",
		"                    font-size: var(--fs, inherit);",
		"                    --fs: var(--_fs);",
		"                    fill: var(--_fill, --fill);",
		"                }",
		"",
		"",
		"                </style>",
		"",
		"                ",
		"",
		"                ",
		"",
		"                `;   ",
		"",
		"                this.root.appendChild(template.content.cloneNode(true));",
		"",
		"",
		"            }",
		"",
		"",
		"",
		"            static get observedAttributes() {",
		"                // return [\"opened\"];",
		"            }",
		"            ",
		"",
		"            get opened() {",
		"                // return this.getAttribute(\"opened\");",
		"            }",
		"            set opened(value) {",
		"                // this.setAttribute(\"opened\", value)",
		"            }",
		"            connectedCallback() {",
		"            }",
		"        }       ",
		"",
		"        customElements.define(\"${2:your}-${3:tag}\" , ${1:className});"
	],
	"description": "JSWebComponent"
},
"attributeChangedCallback": {
	"prefix": "acc",
	"body": [
		"        if (name === \"${1:attr}\") {",
		"            if (oldValue === null || oldValue === newValue) {",
		"                return;",
		"            }",
		"            console.log(`${1:attr} has been changed`)",
		"        }"
	],
	"description": "attributeChangedCallback"
},
"consoleLog": {
	"prefix": "cl",
	"body": [
		"console.log(${1:example});"
	],
	"description": "consoleLog"
},
"logString": {
	"prefix": "cls",
	"body": [
		"console.log(`",
		"  ",
		"                ${1:example}",
		"",
		"`);"
	],
	"description": "logString"
},
"arrayItem": {
	"prefix": "arritem","body": [
		"\"${1:example}\","
	],
	"description": "arrayItem"
},
"keyValueObject": {
	"prefix": "kv",
	"body": [
		"{",
		"  ${1:key}: ${2:value},",
		"},"
	],
	"description": "object"
},
"tpObject": {
	"prefix": "tpobj",
	"body": [
		"{",
		"  title: \"${1:value}\",",
		"  properties: {",
		"      ${2:prop}: ${3:val},",
		"    }",
		"},"
	],
	"description": "object"
},
"tipObject": {
	"prefix": "tippObj",
	"body": [
		"{",
		"  title: \"${1:value}\",",
		"  items: [${4:}],",
		"  properties: {",
		"      ${2:prop}: ${3:val},",
		"    }",
		"},"
	],
	"description": "tipObject"
},
"forEach": {
	"prefix": "foreach",
	"body": [
		"        ${1:array}.forEach((${2:el}) => {",
		"            ${3:example}",
		"        });    "
	],
	"description": "forEach"
},
"arrayForEach": {
	"prefix": "arrayforeach",
	"body": [
		"Array.from(${1:document}.querySelectorAll(${2:example})).forEach((el) => {",
		"          ${3:example}",
		"    }",
		");"
	],
	"description": "forEach"
},
"addEventListener": {
	"prefix": "adde",
	"body": [
		"addEventListener(\"${1:click}\", (${2:el}) => {",
		"  ${3:el.}",
		"});"
	],
	"description": "addEventListener"
},
"forEntries": {

},
"forKey": {

},
"forValue": {

},
"map": {
	
},
}
